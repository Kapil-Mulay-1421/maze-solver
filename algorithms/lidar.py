def get_walls():
    # Define the walls as a list of tuples representing blocked paths. For example, ((4, 0), (4, 1)) represents a wall between squares (4, 0) and (4, 1).
    walls = [
    ((2, 10), (3, 10)),
    ((14, 12), (15, 12)),
    ((6, 0), (6, 1)),
    ((4, 7), (5, 7)),
    ((7, 6), (7, 7)),
    ((6, 12), (7, 12)),
    ((12, 15), (13, 15)),
    ((13, 14), (14, 14)),
    ((8, 8), (9, 8)),
    ((11, 7), (11, 8)),
    ((11, 5), (12, 5)),
    ((6, 9), (6, 10)),
    ((7, 8), (8, 8)),
    ((2, 12), (3, 12)),
    ((13, 6), (14, 6)),
    ((10, 12), (11, 12)),
    ((0, 12), (0, 13)),
    ((6, 6), (6, 7)),
    ((12, 2), (13, 2)),
    ((1, 4), (2, 4)),
    ((1, 7), (2, 7)),
    ((6, 14), (7, 14)),
    ((13, 1), (14, 1)),
    ((11, 13), (11, 14)),
    ((6, 7), (7, 7)),
    ((1, 6), (2, 6)),
    ((9, 3), (10, 3)),
    ((2, 5), (2, 6)),
    ((10, 7), (10, 8)),
    ((3, 12), (4, 12)),
    ((13, 12), (14, 12)),
    ((11, 4), (11, 5)),
    ((7, 12), (8, 12)),
    ((8, 14), (9, 14)),
    ((9, 12), (9, 13)),
    ((6, 3), (6, 4)),
    ((14, 6), (15, 6)),
    ((8, 0), (9, 0)),
    ((12, 1), (13, 1)),
    ((6, 11), (6, 12)),
    ((13, 5), (14, 5)),
    ((9, 10), (10, 10)),
    ((5, 6), (6, 6)),
    ((3, 11), (3, 12)),
    ((14, 10), (15, 10)),
    ((7, 0), (8, 0)),
    ((11, 1), (11, 2)),
    ((5, 13), (6, 13)),
    ((10, 13), (11, 13)),
    ((9, 14), (10, 14)),
    ((4, 8), (5, 8)),
    ((2, 6), (2, 7)),
    ((3, 13), (4, 13)),
    ((8, 2), (9, 2)),
    ((3, 6), (3, 7)),
    ((3, 10), (4, 10)),
    ((11, 9), (12, 9)),
    ((4, 12), (5, 12)),
    ((2, 11), (3, 11)),
    ((11, 10), (12, 10)),
    ((8, 4), (9, 4)),
    ((4, 9), (5, 9)),
    ((2, 9), (2, 10)),
    ((4, 4), (4, 5)),
    ((4, 10), (5, 10)),
    ((4, 6), (5, 6)),
    ((4, 11), (5, 11)),
    ((5, 12), (6, 12)),
    ((1, 12), (2, 12)),
    ((5, 3), (6, 3)),
    ((7, 13), (7, 14)),
    ((3, 7), (4, 7)),
    ((5, 11), (5, 12)),
    ((0, 9), (0, 10)),
    ((6, 2), (7, 2)),
    ((12, 4), (12, 5)),
    ((6, 5), (7, 5)),
    ((7, 9), (7, 10)),
    ((12, 12), (13, 12)),
    ((6, 6), (7, 6)),
    ((4, 13), (5, 13)),
    ((10, 10), (11, 10)),
    ((13, 10), (14, 10)),
    ((10, 6), (11, 6)),
    ((8, 6), (9, 6)),
    ((10, 1), (11, 1)),
    ((6, 1), (6, 2)),
    ((10, 8), (11, 8)),
    ((12, 6), (13, 6)),
    ((9, 2), (10, 2)),
    ((14, 14), (15, 14)),
    ((12, 14), (13, 14)),
    ((7, 10), (7, 11)),
    ((7, 11), (8, 11)),
    ((6, 8), (7, 8)),
    ((10, 0), (11, 0)),
    ((5, 5), (6, 5)),
    ((8, 13), (8, 14)),
    ((11, 6), (11, 7)),
    ((12, 8), (12, 9)),
    ((3, 14), (4, 14)),
    ((14, 5), (15, 5)),
    ((10, 9), (11, 9)),
    ((13, 13), (14, 13)),
    ((8, 6), (8, 7)),
    ((11, 11), (12, 11)),
    ((4, 2), (5, 2)),
    ((12, 13), (13, 13)),
    ((2, 13), (2, 14)),
    ((9, 8), (10, 8)),
    ((12, 10), (13, 10)),
    ((10, 14), (11, 14)),
    ((7, 7), (8, 7)),
    ((5, 1), (6, 1)),
    ((7, 3), (7, 4)),
    ((8, 9), (9, 9)),
    ((6, 4), (7, 4)),
    ((9, 1), (10, 1)),
    ((13, 11), (14, 11)),
    ((5, 4), (5, 5)),
    ((2, 3), (3, 3)),
    ((7, 1), (8, 1)),
    ((3, 5), (4, 5)),
    ((6, 10), (7, 10)),
    ((8, 7), (9, 7)),
    ((10, 2), (11, 2)),
    ((9, 7), (10, 7)),
    ((10, 5), (11, 5)),
    ((5, 14), (6, 14)),
    ((1, 5), (2, 5)),
    ((3, 9), (4, 9)),
    ((11, 3), (12, 3)),
    ((1, 8), (2, 8)),
    ((13, 7), (14, 7)),
    ((13, 9), (14, 9)),
    ((3, 2), (4, 2)),
    ((2, 8), (2, 9)),
    ((11, 14), (12, 14)),
    ((9, 5), (10, 5)),
    ((5, 9), (5, 10)),
    ((10, 4), (11, 4)),
    ((6, 13), (7, 13)),
    ((7, 2), (7, 3)),
    ((13, 3), (14, 3)),
    ((8, 12), (9, 12)),
    ((2, 2), (3, 2)),
    ((4, 5), (4, 6)),
    ((11, 12), (11, 13)),
    ((9, 13), (10, 13)),
    ((5, 8), (6, 8)),
    ((2, 4), (3, 4)),
    ((7, 5), (8, 5)),
    ((8, 5), (9, 5)),
    ((3, 3), (4, 3)),
    ((10, 3), (11, 3)),
    ((8, 1), (9, 1)),
    ((5, 7), (6, 7)),
    ((12, 7), (13, 7)),
    ((14, 8), (15, 8)),
    ((7, 14), (8, 14)),
    ((5, 2), (6, 2)),
    ((6, 10), (6, 11)),
    ((12, 5), (13, 5)),
    ((4, 6), (4, 7)),
    ((6, 9), (7, 9)),
    ((2, 14), (3, 14)),
    ((14, 13), (15, 13)),
    ((13, 8), (14, 8)),
    ((9, 6), (9, 7)),
    ((4, 1), (5, 1)),
    ((5, 10), (6, 10)),
    ((6, 11), (7, 11)),
    ((9, 0), (10, 0)),
    ((8, 10), (9, 10))
]

    return walls

def scan(x, y, direction):
    # simulates lidar by returning the walls around the current position of the mouse
    walls = get_walls()
    found_walls = []
    dx, dy = direction
    # if there is a wall directly in front of the mouse, return it
    if ((x, y), (x + dx, y + dy)) in walls or ((x, y), (x + dx, y + dy)) in walls:
        found_walls.append(((x, y), (x + dx, y + dy)))
        print('returning wall in front of mouse', (x + dx, y + dy))
        return found_walls
    # else return the walls diagonally to the left and right and one block in front of the mouse (these will be the same as the walls around the block in front of the mouse)
    for wall in walls:
        if (x + dx, y + dy) == wall[0] or (x + dx, y + dy) == wall[1]:
            found_walls.append(wall)
    return found_walls